# 位运算符：处理的运算数是二进制的0、1
# &、|、~、^、<<、>>

# 1、位与运算&：参与运算的两个位，同时为1则为1，否则为0
a = 60
b = 13
print(a & b)  #12?????

# 在计算机的内部，最终处理的数据类型就是二进制的补码。
# 原码、反码和补码
# 正数的原码、反码和补码是一样的（负数就比较麻烦了）
# 0b101011
# 二进制转十进制的公式：每一个位上数字乘以2的该位置编号-1（从右侧往左侧数）次方，把所有的结果叠加
# 0b101011 = 1*(2**5)+0*(2**4)+1*(2**3)+0*(2**2)+1*(2**1)+1*(2**0)=43
# 十进制转为二进制的公式：用十进制的数据除以2，得到余数，直到除尽，将余数反转即为二进制
# 8421码：快速进行十进制和二进制转换的方法
# 一个整数要占4个字节，一个字节要有8位
# 60 = 0b00000000 00000000 00000000 00111100（原码）
# 13 = 0b00000000 00000000 00000000 00001101（原码）
# 60的补码：0b00000000 00000000 00000000 00111100
# 13的补码：0b00000000 00000000 00000000 00001101
#60&13补码：0b00000000 00000000 00000000 00001100
#60&13反码：0b00000000 00000000 00000000 00001100
#60&13原码：0b00000000 00000000 00000000 00001100  --> 12

# 2、位或运算|：参与运算的两个位，同时为0则为0，否则为1
print(a | b)  #61？？？
# 60的补码：0b00000000 00000000 00000000 00111100
# 13的补码：0b00000000 00000000 00000000 00001101
#60|13补码：0b00000000 00000000 00000000 00111101
#60|13反码：0b00000000 00000000 00000000 00111101
#60|13原码：0b00000000 00000000 00000000 00111101  --->61

# 3、取反运算~：把每一位补码的运算数取反，0变1、1变0
# 如果是32位的话，最高位如果是1，则表示该数据是负数，为0是整数
# 对于正数，原反补码是一样的
# 对于负数来说，原反补的处理：
# 原码到反码：符号位（最高位）不变，其余各位取反（0变1、1变0）
# 反码到补码：符号位不变，最最末尾+1
# 补码可以参与运算了，得到的运算数据仍然是补码，需要再转回原码进行展示
# 补码到反码：符号位不变，最最末尾-1
# 反码到原码：符号位（最高位）不变，其余各位取反（0变1、1变0）
# 这样就得到了原码（我们要的结果）

print(~a)   #-61
# 60的原码：0b00000000 00000000 00000000 00111100
# 60的反码：0b00000000 00000000 00000000 00111100
# 60的补码：0b00000000 00000000 00000000 00111100
# ~60的补码:0b11111111 11111111 11111111 11000011
# ~60的反码:0b11111111 11111111 11111111 11000010
# ~60的原码:0b10000000 00000000 00000000 00111101   ---> -61


# 4、位异或运算^: 参与运算的两个位数据相同则为0，不同则为1
# 男女--可以（1）、男男（0）、女女（0）
print(a ^ b)  #49
# 60的补码：0b00000000 00000000 00000000 00111100
# 13的补码：0b00000000 00000000 00000000 00001101
#60^13补码：0b00000000 00000000 00000000 00110001
#60^13反码：0b00000000 00000000 00000000 00110001
#60^13原码：0b00000000 00000000 00000000 00110001    --->49

# 5、<<左移运算:将二进制的补码数据，整体向左侧移动指定的位数，最左侧抛弃，右侧补零
# 特点：往左移动n位，相当于原来数据乘以(2**n)
print(a << 2)
# 60的补码：0b00000000 00000000 00000000 00111100
# a<<1补码：0b00000000 00000000 00000000 01111000     
# a<<1反码：0b00000000 00000000 00000000 01111000     
# a<<1原码：0b00000000 00000000 00000000 01111000     --->64+32+16+8=120

# 6、>>右移运算:将二进制的补码数据，整体往右侧移动指定的位数，最左侧填零，最右侧抛弃
# 特点：往右移动n位，相当于原来数据除以(2**n)
print(a >> 1)
# 60的补码：0b00000000 00000000 00000000 00111100
# a>>1补码：0b00000000 00000000 00000000 00011110     
# a>>1反码：0b00000000 00000000 00000000 00011110     
# a>>1原码：0b00000000 00000000 00000000 00011110     --->16+8+4+2=30

# 练习：a = 30, b=9
# a & b
# a | b
# ~a
# a ^ b
# a>>1
# a<<2